<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ChallengeMapper">

<insert id="insertChallenge" parameterType="hashmap">
	insert all
	into challenge 
		(chall_id, 
		userid, 
		chall_title, 
		chall_content, 
		chall_category, 
		chall_hits, 
		chall_liked, 
		chall_created, 
		chall_img,
		chall_comments,
		chall_this_month) 
	values 
		(challenge_chall_id_seq.NEXTVAL, 
		#{userid}, 
		#{chall_title}, 
		#{chall_content}, 
		#{chall_category}, 
		0, 
		0, 
		CURRENT_TIMESTAMP, 
		#{chall_img},
		0,
		0)
	<if test='chall_category=="이 달의 챌린지"'>
	into member_stamp
		(userid,
		stamp_id,
		chall_id,
		stamp_created)
	values
		(#{userid},
		(select stamp_id from stamp join challenge using(chall_id) where chall_this_month=1),
		challenge_chall_id_seq.NEXTVAL,
		CURRENT_TIMESTAMP)
	</if>
	select * from dual
</insert>

<select id="selectAllChallenge" parameterType="hashmap" resultType="ChallengeDTO">
	select * from challenge
	<where>
	  <if test='searchName!=null and !searchName.equals("null")'>
	 	${searchName} like '%${searchValue}%'
	  </if>
	</where> 
	order by 
	<if test="sortBy!=null">
		${sortBy} desc,
	</if>
	chall_id desc
</select>

<select id="countTotal" parameterType="hashmap" resultType="int">
	select count(*) from challenge
 	<where>
 	  <if test='searchName!=null and !searchName.equals("null")'>
	 	${searchName} like '%${searchValue}%'
	  </if>
	</where> 
</select>

<select id="selectChallengeByUserid" parameterType="hashmap" resultType="ChallengeDTO">
	select * from challenge
	where userid=#{userid}
	<if test='searchName!=null and !searchName.equals("null")'>
	and ${searchName} like '%${searchValue}%'
	</if>
	order by 
	<if test="sortBy!=null">
		${sortBy} desc,
	</if>
	chall_id desc
</select>

<select id="countTotalUserChallenge" resultType="int">
	select count(*) from challenge
	where userid=#{userid}
	<if test='searchName!=null and !searchName.equals("null")'>
	and ${searchName} like '%${searchValue}%'
	</if>
</select>

<select id="selectOneChallenge" resultType="ChallengeDTO">
	select * from challenge 
	where chall_id = #{chall_id}
</select>

<update id="updateChallenge" parameterType="hashmap">
	update challenge
	set chall_category=#{chall_category},
		chall_title=#{chall_title},
		chall_img=#{chall_img},
		chall_content=#{chall_content}
	where chall_id=#{chall_id}
</update>

<update id="updateChallHits">
	update challenge
	set chall_hits=chall_hits+1
	where chall_id=#{chall_id}
</update>

<delete id="deleteChallenge">
	delete from challenge
	where chall_id=#{chall_id}
</delete>



<insert id="insertComment" parameterType="com.dto.CommentsDTO">
	insert into comments
		(comment_id,
		chall_id,
		comment_content,
		comment_created,
		userid,
		parent_id,
		group_order,
		step
		)
	values 
		(comments_comment_id_seq.NEXTVAL, 
		#{chall_id}, 
		#{comment_content}, 
		CURRENT_TIMESTAMP, 
		#{userid},
		0,
		(select nvl(max(group_order),0)+1 from comments where chall_id=#{chall_id}),
		0
		)
</insert>

<insert id="insertReply" parameterType="com.dto.CommentsDTO">
	insert into comments
		(comment_id,
		chall_id,
		comment_content,
		comment_created,
		userid,
		parent_id,
		group_order,
		step
		)
	values 
		(comments_comment_id_seq.NEXTVAL, 
		#{chall_id}, 
		#{comment_content}, 
		CURRENT_TIMESTAMP, 
		#{userid},
		#{parent_id},
		#{group_order},
		(	select max(step)+1 from comments 
			where chall_id=#{chall_id} 
			and group_order=#{group_order}
			)
		)
</insert>

<select id="selectAllComments" resultType="com.dto.CommentsDTO">
	select * from comments
	where chall_id=#{chall_id}
	order by group_order desc, step
</select>

<delete id="deleteAllComments">
	delete from comments
	where comment_id in 
		(	select comment_id from comments
			start with comment_id=#{comment_id}
			connect by prior comment_id=parent_id
		)
</delete>

<update id="updateComment" parameterType="com.dto.CommentsDTO">
	update comments
	set comment_content=#{comment_content}
	where comment_id=#{comment_id}
</update>

<select id="countComments" resultType="int">
	select chall_comments from challenge
	where chall_id=#{chall_id}
</select>

<update id="updateChallComments">
	update challenge
	set chall_comments=(select count(*) from comments
						where chall_id=#{chall_id})
	where chall_id=#{chall_id}
</update>


<select id="selectAllLikedUserid" resultType="string">
	select userid from chall_liked
	where chall_id=#{chall_id}
</select>

<insert id="insertLike" parameterType="hashmap">
	insert into chall_liked (chall_id, userid)
	values (#{chall_id}, #{userid})
</insert>

<update id="updateChallLiked">
	update challenge
	set chall_liked=(select count(*) from chall_liked 
					where chall_id=#{chall_id})
	where chall_id=#{chall_id}
</update>

<select id="countLiked" resultType="int">
	select chall_liked from challenge
	where chall_id=#{chall_id}
</select>

<select id="countLikedByMap" resultType="int">
	select count(*) from chall_liked
	where chall_id=#{chall_id} and userid=#{userid}
</select>

<delete id="deleteLike" parameterType="hashmap">
	delete from chall_liked
	where chall_id=#{chall_id} and userid=#{userid}
</delete>


<select id="selectProfile" resultType="hashmap">
	select * from profile
	where userid=#{userid}
</select>

<select id="selectProfileImg" resultType="string">
	select profile_img from profile
	where userid=#{userid}
</select>

<select id="selectNewChallenge" resultType="ChallengeDTO">
	select * from challenge order by chall_id desc
</select>



<insert id="insertAdminChallenge" parameterType="hashmap">
	insert all 
	into challenge (chall_id, 
			userid, 
			chall_title, 
			chall_content, 
			chall_category, 
			chall_hits, 
			chall_liked, 
			chall_created, 
			chall_img,
			chall_comments,
			chall_this_month)
	    values 
			(challenge_chall_id_seq.NEXTVAL, 
			#{userid}, 
			#{chall_title}, 
			#{chall_content}, 
			#{chall_category}, 
			0, 
			0, 
			CURRENT_TIMESTAMP, 
			#{chall_img},
			0,
			1)
	into stamp (stamp_id,
			chall_id,
			stamp_img,
			stamp_name,
			stamp_content)
		values
			(stamp_stamp_id_seq.NEXTVAL,
			challenge_chall_id_seq.NEXTVAL,
			#{stamp_img},
			#{stamp_name},
			#{stamp_content})
	into member_stamp (userid,
			stamp_id,
			chall_id,
			stamp_created)
	values
			(#{userid},
			stamp_stamp_id_seq.NEXTVAL,
			challenge_chall_id_seq.NEXTVAL,
			CURRENT_TIMESTAMP)
	select * from dual
</insert>

<select id="selectOneStamp" resultType="com.dto.StampDTO">
	select * from stamp
	where chall_id=#{chall_id}
</select>

<update id="updateStamp" parameterType="hashmap">
	update stamp
	set stamp_img=#{stamp_img},
		stamp_name=#{stamp_name},
		stamp_content=#{stamp_content}
	where chall_id=#{chall_id}
</update>

<update id="updateChallThisMonth" parameterType="hashmap">
	update challenge
	set chall_this_month=${after}
	where chall_this_month=${before}
	<if test="before == 0">
	and chall_id=(select max(chall_id) from challenge
					where userid='admin1')
	</if>
</update>

<select id="selectChallThisMonth" resultType="ChallengeDTO">
	select * from challenge
	where chall_this_month=1
</select>

<select id="selectMemberStamp" resultType="hashmap">
    select userid, stamp_id, m.chall_id, stamp_img
	from member_stamp m join stamp s using(stamp_id)
	where m.chall_id=#{chall_id}
</select>

<select id="selectMemberStampByUserid" resultType="com.dto.StampDTO">
	select userid, stamp_id, stamp_img, stamp_name, stamp_content 
	from member_stamp m join stamp s using(stamp_id)
	where userid=#{userid}
	and m.chall_id in (select min(chall_id) 
						from member_stamp
						group by userid, stamp_id 
						having userid=#{userid})
	order by stamp_id desc
</select>

<select id="countTotalStamp" resultType="int">
	select count(*) 
	from member_stamp m join stamp s using(stamp_id)
	where userid=#{userid}
	and m.chall_id in (select min(chall_id) 
						from member_stamp
						group by userid, stamp_id 
						having userid=#{userid})
</select>

<select id="selectStampImg" resultType="string">
	select stamp_img
	from stamp
	where stamp_id=#{stamp_id}
</select>




<insert id="insertReport" parameterType="hashmap">
	insert into report
		(report_id,
		userid,
		<if test="chall_id != null">
		chall_id,
		reported_userid,
		</if>
		<if test="comment_id != null">
		comment_id,
		reported_userid,
		</if>
		report_reason,
		report_status,
		report_created)
	values
		(report_report_id_seq.NEXTVAL,
		#{userid},
		<if test="chall_id != null">
		#{chall_id},
		(select userid from challenge where chall_id=#{chall_id}),
		</if>
		<if test="comment_id != null">
		#{comment_id},
		(select userid from comments where comment_id=#{comment_id}),
		</if>
		#{report_reason},
		0,
		CURRENT_TIMESTAMP)
</insert>

<select id="checkReportExist" parameterType="hashmap" resultType="int">
	select count(*) from report
	where userid=#{userid} 
	and
	<if test="chall_id != null">
		chall_id=#{chall_id}
	</if>
	<if test="comment_id != null">
		comment_id=#{comment_id}
	</if>
</select>

<select id="selectAllReport" parameterType="hashmap" resultType="com.dto.ReportDTO">
	select r.report_id,
			r.userid,
			case when r.chall_id is not null then '게시글'
       			when r.comment_id is not null then '댓글'
        		end report_category,
			r.chall_id,
			r.comment_id,
			case r.report_reason 
		        when 1 then '지나친 광고성 글'
		        when 2 then '스팸홍보/도배 글'
		        when 3 then '욕설/비방이 심함'
		        when 4 then '외설적인 글'
		        when 5 then '개인정보 노출'
		        when 6 then '저작권 침해가 우려됨'
		        when 7 then '기타'
		        end report_reason,
			case r.report_status 
		        when 0 then '처리 대기'
		        when 1 then '처리 완료'
		        end report_status,
			r.report_created,
			r.reported_userid, 
			COALESCE(ch.chall_title, co.comment_content, '(삭제된 글입니다)') content
	from report r, challenge ch, comments co 
	where r.chall_id=ch.chall_id (+)
	and r.comment_id=co.comment_id (+)
 	  <if test='searchName!=null and !searchName.equals("null")'>
	 	and ${searchName} like '%${searchValue}%'
	  </if>
	  <if test='status!=null and !status.equals("null")'> 
 	  	and report_status=${status}
	  </if>
	order by report_id desc
</select>

<select id="countTotalReport" parameterType="hashmap" resultType="int">
	select count(*) 
	from report r, challenge ch, comments co 
	where r.chall_id=ch.chall_id (+)
	and r.comment_id=co.comment_id (+)
 	  <if test='searchName!=null and !searchName.equals("null")'>
	 	and ${searchName} like '%${searchValue}%'
	  </if>
	  <if test='status!=null and !status.equals("null")'> 
 	  	and report_status=${status}
	  </if>
</select>

<delete id="deleteReport" parameterType="list">
	delete from report
	where report_id in
	<foreach item="id" collection="list" open="(" separator="," close=")">
		#{id}
	</foreach>
</delete>

<select id="selectOneReport" resultType="com.dto.ReportDTO">
	select * from report
	where report_id=#{report_id}
</select>

<select id="selectChallIdFromComment" resultType="int">
	select chall_id from comments
	where comment_id=#{comment_id}
</select>

<update id="updateReport" parameterType="hashmap">
	update report
	set report_status=#{report_status}
	where report_id=#{report_id}
</update>


</mapper>